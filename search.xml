<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>字符串专题1</title>
      <link href="/2022/12/19/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%93%E9%A2%981/"/>
      <url>/2022/12/19/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%93%E9%A2%981/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表专题2</title>
      <link href="/2022/12/18/%E5%93%88%E5%B8%8C%E8%A1%A8%E4%B8%93%E9%A2%982/"/>
      <url>/2022/12/18/%E5%93%88%E5%B8%8C%E8%A1%A8%E4%B8%93%E9%A2%982/</url>
      
        <content type="html"><![CDATA[<h2 id="454-四数相加-II"><a href="#454-四数相加-II" class="headerlink" title="454. 四数相加 II"></a>454. 四数相加 II</h2><p><a href="https://leetcode.cn/problems/4sum-ii/">https://leetcode.cn/problems/4sum-ii/</a></p><h4 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h4><p>肯定是四个for loops然后相加等于0 — 超出时间限制</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fourSumCount</span>(<span class="params">self, nums1: <span class="type">List</span>[<span class="built_in">int</span>], nums2: <span class="type">List</span>[<span class="built_in">int</span>], nums3: <span class="type">List</span>[<span class="built_in">int</span>], nums4: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums1:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> nums2:</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> nums3:</span><br><span class="line">                    <span class="keyword">for</span> l <span class="keyword">in</span> nums4:</span><br><span class="line">                        <span class="keyword">if</span> i + j + k + l == <span class="number">0</span>:</span><br><span class="line">                            res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h4 id="把四个for-loop变成两个for-loop-利用哈希表储存"><a href="#把四个for-loop变成两个for-loop-利用哈希表储存" class="headerlink" title="把四个for loop变成两个for loop(利用哈希表储存)"></a>把四个for loop变成两个for loop(利用哈希表储存)</h4><ul><li>先遍历前面两个数组然后利用dict储存起来，key是数组相加的值，value是值出现的次数</li><li>后面遍历两个for loop查询负的两个相加的值是否出现在前面创建的字典的key里面</li><li><strong>如果出现了就是加上之前存储字典里面出现的次数</strong></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fourSumCount</span>(<span class="params">self, nums1: <span class="type">List</span>[<span class="built_in">int</span>], nums2: <span class="type">List</span>[<span class="built_in">int</span>], nums3: <span class="type">List</span>[<span class="built_in">int</span>], nums4: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        dict_ =&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums1:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> nums2:</span><br><span class="line">                dict_[i + j] = dict_.get(i+j,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums3:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> nums4:</span><br><span class="line">                <span class="keyword">if</span> -(i+j) <span class="keyword">in</span> dict_.keys():</span><br><span class="line">                    res += dict_[-(i+j)]</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383. 赎金信"></a>383. 赎金信</h2><p><a href="https://leetcode.cn/problems/ransom-note/">https://leetcode.cn/problems/ransom-note/</a></p><h3 id="defaultdict的使用"><a href="#defaultdict的使用" class="headerlink" title="defaultdict的使用"></a>defaultdict的使用</h3><p>From: <a href="https://www.geeksforgeeks.org/defaultdict-in-python/">https://www.geeksforgeeks.org/defaultdict-in-python/</a></p><p> It provides a default value for the key that does not exists.</p><h4 id="对于函数"><a href="#对于函数" class="headerlink" title="对于函数"></a>对于函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">def_value</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Not Present&quot;</span></span><br><span class="line">      </span><br><span class="line"><span class="comment"># Defining the dict</span></span><br><span class="line">d = defaultdict(def_value)</span><br><span class="line">d[<span class="string">&quot;a&quot;</span>] = <span class="number">1</span></span><br><span class="line">d[<span class="string">&quot;b&quot;</span>] = <span class="number">2</span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(d[<span class="string">&quot;a&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(d[<span class="string">&quot;b&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(d[<span class="string">&quot;c&quot;</span>])</span><br><span class="line">-------------</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">Not Present </span><br></pre></td></tr></table></figure><h4 id="利用lambda表达式"><a href="#利用lambda表达式" class="headerlink" title="利用lambda表达式"></a>利用lambda表达式</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">  </span><br><span class="line">      </span><br><span class="line"><span class="comment"># Defining the dict and passing </span></span><br><span class="line"><span class="comment"># lambda as default_factory argument</span></span><br><span class="line">d = defaultdict(<span class="keyword">lambda</span>: <span class="string">&quot;Not Present&quot;</span>)</span><br><span class="line">d[<span class="string">&quot;a&quot;</span>] = <span class="number">1</span></span><br><span class="line">d[<span class="string">&quot;b&quot;</span>] = <span class="number">2</span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(d[<span class="string">&quot;a&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(d[<span class="string">&quot;b&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(d[<span class="string">&quot;c&quot;</span>])</span><br><span class="line">-------------</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">Not Present</span><br><span class="line">--------------------------------------------------</span><br><span class="line">__missing__(): function的用法</span><br><span class="line"><span class="keyword">if</span>:argument <span class="keyword">is</span> <span class="literal">None</span> 会出现a KeyError</span><br><span class="line"><span class="keyword">else</span>:  provides a default value <span class="keyword">for</span> the given key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="comment"># Defining the dict</span></span><br><span class="line">d = defaultdict(<span class="keyword">lambda</span>: <span class="string">&quot;Not Present&quot;</span>)</span><br><span class="line">d[<span class="string">&quot;a&quot;</span>] = <span class="number">1</span></span><br><span class="line">d[<span class="string">&quot;b&quot;</span>] = <span class="number">2</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Provides the default value </span></span><br><span class="line"><span class="comment"># for the key</span></span><br><span class="line"><span class="built_in">print</span>(d.__missing__(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(d.__missing__(<span class="string">&#x27;d&#x27;</span>))</span><br><span class="line">---------------output</span><br><span class="line">Not Present</span><br><span class="line">Not Present </span><br></pre></td></tr></table></figure><h4 id="int-和-list"><a href="#int-和-list" class="headerlink" title="int 和 list"></a>int 和 list</h4><ul><li><p>Using int as default_factory(a defaultdict is created with <strong>default value as zero</strong>)<br><code>from collections import defaultdict</code><br><code>d = defaultdict(int)</code></p></li><li><p>a defaultdict is created with the values that are list.</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    d[i].append(i)</span><br><span class="line">d = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">&#123;<span class="number">0</span>: [<span class="number">0</span>], <span class="number">1</span>: [<span class="number">1</span>], <span class="number">2</span>: [<span class="number">2</span>], <span class="number">3</span>: [<span class="number">3</span>], <span class="number">4</span>: [<span class="number">4</span>]&#125;)</span><br></pre></td></tr></table></figure><h3 id="对于counter的使用"><a href="#对于counter的使用" class="headerlink" title="对于counter的使用"></a>对于counter的使用</h3><p>From: <a href="https://pythongeeks.org/python-counter-module/">https://pythongeeks.org/python-counter-module/</a><br>语法：<br><code>obj = collections.Counter([iterable-or-mapping])</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter  <span class="comment"># collections = module name </span></span><br><span class="line">                                 <span class="comment"># Counter = class name</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">issubclass</span>(Counter, <span class="built_in">dict</span>)) <span class="comment"># issubclass() = function name</span></span><br><span class="line"><span class="comment"># print() = function name, dict = class name</span></span><br><span class="line">-----output</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> Creating a Counter Object using **Iterables** <span class="keyword">in</span> Python</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">c = Counter([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(c) </span><br><span class="line">output: Counter(&#123;<span class="number">1</span>: <span class="number">3</span>, <span class="number">3</span>: <span class="number">2</span>, <span class="number">2</span>: <span class="number">1</span>, <span class="number">4</span>: <span class="number">1</span>&#125;)</span><br><span class="line">----------------------------------------------</span><br><span class="line"><span class="number">2.</span> Creating a Counter Object using **Strings** <span class="keyword">in</span> Python</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">c = Counter(<span class="string">&quot;PythonGeeks&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">output: Counter(&#123;‘e’: <span class="number">2</span>, ‘P’: <span class="number">1</span>, ‘y’: <span class="number">1</span>, ‘t’: <span class="number">1</span>, ‘h’: <span class="number">1</span>, ‘o’: <span class="number">1</span>, ‘n’: <span class="number">1</span>, ‘G’: <span class="number">1</span>, ‘k’: <span class="number">1</span>, ‘s’: <span class="number">1</span>&#125;)</span><br><span class="line">----------------------------------------------</span><br><span class="line"><span class="number">3.</span> Creating a Counter Object using **Dictionary** <span class="keyword">in</span> Python</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">c = Counter(&#123;<span class="string">&quot;A&quot;</span>: <span class="number">2</span>, <span class="string">&quot;B&quot;</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">output: Counter(&#123;‘A’: <span class="number">2</span>, ‘B’: <span class="number">1</span>&#125;)</span><br><span class="line">----------------------------------------------</span><br><span class="line"><span class="number">4.</span> Creating a Counter Object using Keyword Arguments <span class="keyword">in</span> Python</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">c = Counter(A=<span class="number">2</span>, B=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">output: Counter(&#123;‘A’: <span class="number">2</span>, ‘B’: <span class="number">1</span>&#125;)</span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line">获取值</span><br><span class="line">c = Counter([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(c[<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">output: <span class="number">2</span></span><br><span class="line">不像普通字典，counter会返回<span class="number">0</span>，而不会引起 KeyError, 如果传入的argument不在里面</span><br><span class="line">c = Counter([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(c[<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">output: <span class="number">0</span></span><br><span class="line">----------------------------------------------</span><br><span class="line">修改添加值</span><br><span class="line"></span><br><span class="line">c[<span class="string">&#x27;a&#x27;</span>] = <span class="number">1</span></span><br><span class="line">c[<span class="string">&#x27;c&#x27;</span>] = <span class="number">4</span></span><br><span class="line">----------------------------------------------</span><br><span class="line">方法：</span><br><span class="line"><span class="number">1.</span>update():</span><br><span class="line">c = Counter([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">c.update([<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;e&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">output:Counter(&#123;‘a’: <span class="number">2</span>, ‘b’: <span class="number">1</span>, ‘c’: <span class="number">1</span>&#125;)Counter(&#123;‘a’: <span class="number">3</span>, ‘d’: <span class="number">2</span>, ‘b’: <span class="number">1</span>, ‘c’: <span class="number">1</span>, ‘e’: <span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>elements():returns an iterator that we can use <span class="keyword">in</span> <span class="keyword">for</span>-loops to iterate over <span class="built_in">all</span> elements <span class="keyword">and</span> their counts <span class="keyword">in</span> the counter <span class="built_in">object</span>.</span><br><span class="line">c = Counter([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"><span class="keyword">for</span> ele <span class="keyword">in</span> c.elements():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;ele&#125;</span> - <span class="subst">&#123;c[ele]&#125;</span>&quot;</span>)</span><br><span class="line">output: a – 2a – <span class="number">2</span></span><br><span class="line"></span><br><span class="line">b – <span class="number">1</span></span><br><span class="line"></span><br><span class="line">c – <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>most_common([n])：sort 从最高频率到最低评率到n</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">c = Counter([<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(c.most_common(<span class="number">2</span>))</span><br><span class="line">output: [(<span class="number">1</span>, <span class="number">5</span>), (<span class="number">2</span>, <span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>clear():清空所有</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>算数+，-，&amp;，｜</span><br><span class="line">+：两个<span class="built_in">dict</span>元素相加</span><br><span class="line">-：两个<span class="built_in">dict</span> 相减，比如 a-b,最后的结果只是减去b中有相同key的元素</span><br><span class="line">c1 = Counter(a=<span class="number">3</span>, b=<span class="number">1</span>, c=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line">c2 = Counter(c=<span class="number">1</span>, d=<span class="number">2</span>, e=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line">c3 = c1 - c2</span><br><span class="line"><span class="built_in">print</span>(c3)</span><br><span class="line">output: Counter(&#123;‘a’: <span class="number">3</span>, ‘c’: <span class="number">2</span>, ‘b’: <span class="number">1</span>&#125;)Counter(&#123;‘e’: <span class="number">3</span>, ‘d’: <span class="number">2</span>, ‘c’: <span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line">Counter(&#123;‘a’: <span class="number">3</span>, ‘b’: <span class="number">1</span>, ‘c’: <span class="number">1</span>&#125;)</span><br><span class="line">&amp;: 返回item在两个<span class="built_in">dict</span>里面都出现</span><br><span class="line">|: 和加法类似但是不想家数值</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">c1 = Counter(a=<span class="number">3</span>, b=<span class="number">1</span>, c=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line">c2 = Counter(c=<span class="number">1</span>, d=<span class="number">2</span>, e=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line">c3 = c1 | c2</span><br><span class="line"><span class="built_in">print</span>(c3)</span><br><span class="line">output:Counter(&#123;‘a’: <span class="number">3</span>, ‘c’: <span class="number">2</span>, ‘b’: <span class="number">1</span>&#125;)Counter(&#123;‘e’: <span class="number">3</span>, ‘d’: <span class="number">2</span>, ‘c’: <span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line">Counter(&#123;‘a’: <span class="number">3</span>, ‘e’: <span class="number">3</span>, ‘c’: <span class="number">2</span>, ‘d’: <span class="number">2</span>, ‘b’: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="利用数组当作哈希表"><a href="#利用数组当作哈希表" class="headerlink" title="利用数组当作哈希表"></a>利用数组当作哈希表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">canConstruct</span>(<span class="params">self, ransomNote: <span class="built_in">str</span>, magazine: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        list_ = [<span class="number">0</span>] * <span class="number">26</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> magazine:</span><br><span class="line">            list_[<span class="built_in">ord</span>(i) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> ransomNote:</span><br><span class="line">            list_[<span class="built_in">ord</span>(j) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)] -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> list_:</span><br><span class="line">            <span class="keyword">if</span> k &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="直接哈希表"><a href="#直接哈希表" class="headerlink" title="直接哈希表"></a>直接哈希表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">canConstruct</span>(<span class="params">self, ransomNote: <span class="built_in">str</span>, magazine: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        dict_ = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> magazine:</span><br><span class="line">            dict_[i] = dict_.get(i,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> ransomNote:</span><br><span class="line">            dict_[j] = dict_.get(j,<span class="number">0</span>) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> dict_.values():</span><br><span class="line">            <span class="keyword">if</span> k &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p><strong>用defaultdict</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">canConstruct</span>(<span class="params">self, ransomNote: <span class="built_in">str</span>, magazine: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">        dict_ = defaultdict(<span class="built_in">int</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> magazine:</span><br><span class="line">            dict_[i] = dict_.get(i,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> ransomNote:</span><br><span class="line">            <span class="keyword">if</span> dict_[j] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dict_[j] = dict_.get(j,<span class="number">0</span>) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p><strong>用Counter</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">canConstruct</span>(<span class="params">self, ransomNote: <span class="built_in">str</span>, magazine: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        a = collections.Counter(magazine)</span><br><span class="line">        b = collections.Counter(ransomNote)</span><br><span class="line">        diff = b - a</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(diff) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a>15. 三数之和</h2><p><a href="https://leetcode.cn/problems/3sum/">https://leetcode.cn/problems/3sum/</a></p><h3 id="相向双指针"><a href="#相向双指针" class="headerlink" title="相向双指针"></a>相向双指针</h3><ul><li>自己没做出来</li><li>先排序：优化数组可以使用相向双指针</li><li>重点在于去重</li></ul><ol><li><code>nums[i] == nums[i + 1] 并且 i &gt; 0 的时候跳过 i ++</code></li><li><code>while(j &lt;k and nums[j] == nums[j + 1]) j ++</code></li><li><code>while(j &lt; k and nums[k] -- nums[k - 1]) k --</code></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">threeSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        nums.sort()</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">2</span>):</span><br><span class="line">            <span class="comment">#很重要是i 和 i-1,避免跳过相同元素</span></span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment">#剪枝操作</span></span><br><span class="line">            <span class="keyword">if</span> nums[i] + nums[i + <span class="number">1</span>] + nums[i + <span class="number">2</span>] &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment">#剪枝操作</span></span><br><span class="line">            <span class="keyword">if</span> nums[i] + nums[-<span class="number">2</span>] + nums[-<span class="number">1</span>] &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            j = i + <span class="number">1</span></span><br><span class="line">            k = n - <span class="number">1</span></span><br><span class="line">            x = nums[i]</span><br><span class="line">            <span class="keyword">while</span> (j &lt; k):</span><br><span class="line">                <span class="keyword">if</span> x + nums[j] + nums[k] &gt; <span class="number">0</span>:</span><br><span class="line">                    k -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> x + nums[j] + nums[k] &lt; <span class="number">0</span>:</span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    res.append([x,nums[j],nums[k]])</span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">                    k -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> (nums[j] == nums[j - <span class="number">1</span>] <span class="keyword">and</span> j &lt; k):</span><br><span class="line">                        j += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span>( nums[k] == nums[k + <span class="number">1</span>] <span class="keyword">and</span> j &lt; k):</span><br><span class="line">                        k -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18. 四数之和"></a>18. 四数之和</h2><p><a href="https://leetcode.cn/problems/4sum/">https://leetcode.cn/problems/4sum/</a></p><h3 id="思路和三数之和一样就是多了一层for-loop"><a href="#思路和三数之和一样就是多了一层for-loop" class="headerlink" title="思路和三数之和一样就是多了一层for loop"></a>思路和三数之和一样就是多了一层for loop</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fourSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        nums.sort()</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> nums[i] + nums[ i + <span class="number">1</span>] + nums[i+<span class="number">2</span>] + nums[i+<span class="number">3</span>] &gt; target:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            x1 = nums[i]</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,n - <span class="number">2</span>):</span><br><span class="line">                <span class="keyword">if</span> j &gt; i + <span class="number">1</span> <span class="keyword">and</span> nums[j] == nums[j - <span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                x2 = nums[j]</span><br><span class="line">                l = j + <span class="number">1</span></span><br><span class="line">                r = n - <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span>(l &lt; r):</span><br><span class="line">                    sum_ = x1 + x2 + nums[l] + nums[r]</span><br><span class="line">                    <span class="keyword">if</span> sum_ &gt; target:</span><br><span class="line">                        r -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">elif</span> sum_ &lt; target:</span><br><span class="line">                        l += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        res.append([x1,x2,nums[l],nums[r]])</span><br><span class="line">                        l += <span class="number">1</span></span><br><span class="line">                        r -= <span class="number">1</span></span><br><span class="line">                        <span class="keyword">while</span> l &lt; r <span class="keyword">and</span> nums[l] == nums[l - <span class="number">1</span>]:</span><br><span class="line">                            l += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">while</span> l &lt; r <span class="keyword">and</span> nums[r] == nums[r + <span class="number">1</span>]:</span><br><span class="line">                            r -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表专题1</title>
      <link href="/2022/12/17/%E5%93%88%E5%B8%8C%E8%A1%A8%E4%B8%93%E9%A2%981/"/>
      <url>/2022/12/17/%E5%93%88%E5%B8%8C%E8%A1%A8%E4%B8%93%E9%A2%981/</url>
      
        <content type="html"><![CDATA[<h2 id="哈希表基础理论"><a href="#哈希表基础理论" class="headerlink" title="哈希表基础理论"></a>哈希表基础理论</h2><p>数组就可以被看成是一个哈希表</p><ul><li>主要用来判断看一个元素是不是在这个集合里</li><li>相比较而言数组：如需要查询一个学生姓名，数组需要遍历，而哈希表直接进行索引就可以</li><li><strong>为什么哈希表是O(1)查询呢，因为只要知道key或者对于hashset来说知道索引就可以知道所要查询的值，比如要查询这个学生在不在哈希表&#x2F;set()里面,只需要提供这个人的名字然后用哈希函数把名字转换成hashcode之后，之后用 hash 表的数组长度对 key的hashCode 求余， 余数即为 hash 表数组的下标</strong></li></ul><h3 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h3><p>学生的姓名可以通过哈希函数转化为哈希表的索引</p><ul><li>在上面的场景中查询学生姓名，就是通过hashcode把名字转化为数值映射到了哈希表上面的索引数字</li><li>之后为了保证索引数值落在哈希表上面，我们还会对hashcode之后的数值进行取模运算</li></ul><h3 id="哈希碰撞"><a href="#哈希碰撞" class="headerlink" title="哈希碰撞"></a>哈希碰撞</h3><p>对于学生数量大于了创建的哈希表的大小来说<br>有两种解决办法</p><ul><li>拉链法：对于冲突的索引值比如位置<code>index0</code>，我们在0的位置创建一个链表储存冲突的学生</li><li>线性探测法：我们首先要保证hash table size要大于数据量，如果一旦发生冲突我们就在hash table寻找下一个空的位置填放</li></ul><h2 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242. 有效的字母异位词"></a>242. 有效的字母异位词</h2><p><a href="https://leetcode.cn/problems/valid-anagram/">https://leetcode.cn/problems/valid-anagram/</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>范围可控用数组</li><li>范围比较大用set</li><li>key 对应有 value的话就用map</li></ol><h5 id="python-ord-和chr-方法"><a href="#python-ord-和chr-方法" class="headerlink" title="python ord()和chr()方法"></a>python <code>ord()和chr()方法</code></h5><ol><li>ord()：<code>print(ord(&#39;a&#39;)) = 97</code></li><li>chr()：<code>&gt;&gt;&gt; print(chr(97)) = a</code></li></ol><h5 id="创建default-dictionary的方法"><a href="#创建default-dictionary的方法" class="headerlink" title="创建default dictionary的方法"></a>创建default dictionary的方法</h5><ul><li>1.<code>from collections import defaultdict</code></li><li>2.创建一个default dictionary <code>import string   d1 = dict.fromkeys(string.ascii_lowercase, 0)</code> </li><li><code>dict.fromkeys(keys, value)</code>The fromkeys() method returns a dictionary with the specified keys and the specified value.</li></ul><h5 id="initialize-list的方法"><a href="#initialize-list的方法" class="headerlink" title="initialize list的方法"></a>initialize list的方法</h5><ol><li><code>data = [0] * n</code> n的值是需要的创建的数量</li></ol><h4 id="第一想法（用的哈希表）"><a href="#第一想法（用的哈希表）" class="headerlink" title="第一想法（用的哈希表）"></a>第一想法（用的哈希表）</h4><ul><li><p>自己想的用dict然后遍历一个string 遇到就+&#x3D; 1，然后遍历第二个string -&#x3D; 1，但是再次遍历这个dict<br><code>dict.get(key, default = None)</code></p></li><li><p>判断两个dict 相等直接用等于</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isAnagram</span>(<span class="params">self, s: <span class="built_in">str</span>, t: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">import</span> string</span><br><span class="line">        d1 = <span class="built_in">dict</span>.fromkeys(string.ascii_lowercase, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            d1[i] = d1.get(i,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">            d1[i] = d1.get(i) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> d1.values():</span><br><span class="line">            <span class="keyword">if</span> i != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="把数组当作哈希表使用"><a href="#把数组当作哈希表使用" class="headerlink" title="把数组当作哈希表使用"></a>把数组当作哈希表使用</h4><ul><li>创建一个26个长度为0的数组</li><li>其他思路和上面一样</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isAnagram</span>(<span class="params">self, s: <span class="built_in">str</span>, t: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        l = [<span class="number">0</span>] * <span class="number">26</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            l[<span class="built_in">ord</span>(i) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> t:</span><br><span class="line">            l[<span class="built_in">ord</span>(j) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)] -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> l:</span><br><span class="line">            <span class="keyword">if</span> k != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集"></a>349. 两个数组的交集</h2><p><a href="https://leetcode.cn/problems/intersection-of-two-arrays/">https://leetcode.cn/problems/intersection-of-two-arrays/</a></p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><h4 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h4><ul><li>有思路：直接两个for loop然后最后set.add()最后转换set成list</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">intersection</span>(<span class="params">self, nums1: <span class="type">List</span>[<span class="built_in">int</span>], nums2: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        intersect = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums1:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> nums2:</span><br><span class="line">                <span class="keyword">if</span> i == j:</span><br><span class="line">                    intersect.add(i)</span><br><span class="line">        <span class="comment"># set to list 直接用list()</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(intersect)</span><br></pre></td></tr></table></figure><h4 id="用hashmap当作hashset做"><a href="#用hashmap当作hashset做" class="headerlink" title="用hashmap当作hashset做"></a>用hashmap当作hashset做</h4><ul><li>分成两个for loop一个遍历一个排查</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">intersection</span>(<span class="params">self, nums1: <span class="type">List</span>[<span class="built_in">int</span>], nums2: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        hashmap = &#123;&#125;</span><br><span class="line">        result = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums1:</span><br><span class="line">            hashmap[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> nums2:</span><br><span class="line">            <span class="keyword">if</span> j <span class="keyword">in</span> hashmap.keys() <span class="keyword">and</span> hashmap[j] ==<span class="number">1</span>:</span><br><span class="line">                result.add(j)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(result)</span><br></pre></td></tr></table></figure><h2 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202. 快乐数"></a>202. 快乐数</h2><p><a href="https://leetcode.cn/problems/happy-number/">https://leetcode.cn/problems/happy-number/</a></p><h3 id="in-关键字"><a href="#in-关键字" class="headerlink" title="in 关键字"></a>in 关键字</h3><ul><li>python 里面 的in关键字和contains是一样的</li><li>对于list:复杂度是O（n）</li><li>对于set:复杂度是O(1)因为通过hashcode可以直接知道索引下标</li></ul><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ul><li>计算器 十位数如何拆开计算</li><li>取个位数是用%取余符号</li><li>之后每次除以10</li><li>判断n &#x3D;&#x3D; 1的时候return true</li><li>如果不是等于1要判断在不在set里面，如果在说明重复了所以return false</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isHappy</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">happy</span>(<span class="params">n</span>):</span><br><span class="line">            sum_ = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> n:</span><br><span class="line">                sum_ += (n % <span class="number">10</span>) ** <span class="number">2</span></span><br><span class="line">                n //= <span class="number">10</span></span><br><span class="line">            <span class="keyword">return</span> sum_</span><br><span class="line">        hashset = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            n = happy(n)</span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="comment">#这里很重要，in关键字对于set的复杂度只有O(1)</span></span><br><span class="line">            <span class="keyword">if</span> n <span class="keyword">in</span> hashset:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hashset.add(n)</span><br></pre></td></tr></table></figure><h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h2><p><a href="https://leetcode.cn/problems/two-sum/">https://leetcode.cn/problems/two-sum/</a></p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><h4 id="两个单独的for-loop不是嵌套"><a href="#两个单独的for-loop不是嵌套" class="headerlink" title="两个单独的for loop不是嵌套"></a>两个单独的for loop不是嵌套</h4><ul><li>自己的思路:创建hashmap保存key 是 nums里面的数， val是nums里面的index</li><li>但是这个时候第二个for loop会出现一个问题</li><li>会出现比如target为6 nums &#x3D; [3,2,4]，会返回[0,0]这个时候用if 判断一下避免一样就好了</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        hashmap = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            hashmap[j] = i</span><br><span class="line">        <span class="keyword">for</span> i,k <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            rest = target - k</span><br><span class="line">            <span class="keyword">if</span> rest <span class="keyword">in</span> hashmap <span class="keyword">and</span> i != hashmap[rest]:</span><br><span class="line">                <span class="keyword">return</span> [i,hashmap[rest]] </span><br></pre></td></tr></table></figure><h4 id="哈希表一个for-loop"><a href="#哈希表一个for-loop" class="headerlink" title="哈希表一个for loop"></a>哈希表一个for loop</h4><ul><li>遍历的时候同时保存hashmap</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        hashmap = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            rest = target - j</span><br><span class="line">            <span class="keyword">if</span> rest <span class="keyword">not</span> <span class="keyword">in</span> hashmap.keys():</span><br><span class="line">                hashmap[j] = i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> [hashmap[rest],i]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表专题2</title>
      <link href="/2022/12/14/%E9%93%BE%E8%A1%A8%E4%B8%93%E9%A2%982/"/>
      <url>/2022/12/14/%E9%93%BE%E8%A1%A8%E4%B8%93%E9%A2%982/</url>
      
        <content type="html"><![CDATA[<h2 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a>24. 两两交换链表中的节点</h2><p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">https://leetcode.cn/problems/swap-nodes-in-pairs/</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>简单模拟题</li><li>掌握好指针移动循序先 <code>cur.next再cur.next.next再cur.next.next.next </code></li><li>核心：终止条件 <code>cur.next 和 cur.next.next都不为空是才进行</code></li><li>当节点数量为奇数时候：<code>cur.next.next</code>为空时就不需要交换了</li><li>当节点数量为偶数时候<code>cur.next</code>为空就停止</li><li>不能反过来写容易发生空指针异常</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swapPairs</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        dummy = ListNode(<span class="built_in">next</span> = head)</span><br><span class="line">        cur = dummy</span><br><span class="line">        <span class="comment">#必须有下个和下下个不等于none才可以进行(关键)</span></span><br><span class="line">        <span class="keyword">while</span> cur.<span class="built_in">next</span> != <span class="literal">None</span> <span class="keyword">and</span> cur.<span class="built_in">next</span>.<span class="built_in">next</span> != <span class="literal">None</span>:</span><br><span class="line">            temp1 = cur.<span class="built_in">next</span></span><br><span class="line">            temp2 = cur.<span class="built_in">next</span>.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            cur.<span class="built_in">next</span> = cur.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            cur.<span class="built_in">next</span>.<span class="built_in">next</span>= temp1</span><br><span class="line">            cur.<span class="built_in">next</span>.<span class="built_in">next</span>.<span class="built_in">next</span> = temp2</span><br><span class="line">            cur = cur.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a>19. 删除链表的倒数第 N 个结点</h2><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">https://leetcode.cn/problems/remove-nth-node-from-end-of-list/</a></p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ul><li>写了出来</li><li>一个快指针一个慢指针</li><li>快慢指针中间差n个节点</li></ul><h4 id="双指针经典应用"><a href="#双指针经典应用" class="headerlink" title="双指针经典应用"></a>双指针经典应用</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeNthFromEnd</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode], n: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        dummy_head = ListNode(<span class="built_in">next</span> = head)</span><br><span class="line">        pre = dummy_head</span><br><span class="line">        cur = dummy_head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">while</span> n:</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">            n -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            pre = pre.<span class="built_in">next</span></span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        pre.<span class="built_in">next</span> = pre.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> dummy_head.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><h2 id="面试题-02-07-链表相交"><a href="#面试题-02-07-链表相交" class="headerlink" title="面试题 02.07. 链表相交"></a>面试题 02.07. 链表相交</h2><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/</a></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ul><li>暴力解法</li><li>求出链表A的长度再求出链表B的长度</li><li>然后让两个链表处于相同位置</li><li>之后<strong>赋值两个新的node注意不要创建Listnode地址会不同！！</strong></li><li>然后两个指针一直走知道相同返回当前值</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getIntersectionNode</span>(<span class="params">self, headA: ListNode, headB: ListNode</span>) -&gt; ListNode:</span><br><span class="line">        <span class="keyword">if</span> headA == <span class="literal">None</span> <span class="keyword">or</span> headB == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        dummyhead1 = ListNode(<span class="built_in">next</span> = headA.<span class="built_in">next</span>)</span><br><span class="line">        dummyhead2 = ListNode(<span class="built_in">next</span> = headB.<span class="built_in">next</span>)</span><br><span class="line">        lengthA = <span class="number">0</span></span><br><span class="line">        lengthB = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span>(dummyhead1 != <span class="literal">None</span>):</span><br><span class="line">            dummyhead1 = dummyhead1.<span class="built_in">next</span></span><br><span class="line">            lengthA += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span>(dummyhead2 != <span class="literal">None</span>):</span><br><span class="line">            dummyhead2 = dummyhead2.<span class="built_in">next</span></span><br><span class="line">            lengthB += <span class="number">1</span></span><br><span class="line">        <span class="comment">#这里不要 head1 = ListNode(next = headA.next)</span></span><br><span class="line">        <span class="comment"># 地址会不同</span></span><br><span class="line">        head1 = headA</span><br><span class="line">        head2 = headB</span><br><span class="line">        <span class="keyword">if</span> lengthA &gt; lengthB:</span><br><span class="line">            <span class="keyword">while</span> (lengthA - lengthB):</span><br><span class="line">                head1 = head1.<span class="built_in">next</span></span><br><span class="line">                lengthA -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> lengthA &lt; lengthB:</span><br><span class="line">            <span class="keyword">while</span> (lengthB - lengthA):</span><br><span class="line">                head2 = head2.<span class="built_in">next</span></span><br><span class="line">                lengthB -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (head1 != <span class="literal">None</span>):</span><br><span class="line">            <span class="keyword">if</span> head1 == head2:</span><br><span class="line">                <span class="keyword">return</span> head1</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                head1 = head1.<span class="built_in">next</span></span><br><span class="line">                head2 = head2.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h2 id="142-环形链表-II"><a href="#142-环形链表-II" class="headerlink" title="142. 环形链表 II"></a>142. 环形链表 II</h2><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">https://leetcode.cn/problems/linked-list-cycle-ii/</a></p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ul><li>快慢指针</li><li>如何想到的呢就是：如果快指针是慢指针速度的两倍的话两个一定可以遇到</li><li>x,y,z </li><li>x:开始的位置到环的起点位置</li><li>y:环起点位置到相遇的位置</li><li>z:相遇的位置到环起点位置</li><li>所以对于慢指针的移动距离是：x + y</li><li>快指针一定是套了慢指针一圈的所以移动距离是：x +（y+z）+ y</li><li>2(x+y) &#x3D; x + 2y + z</li><li>z &#x3D; x</li><li>所以通过数学推导发现相遇的位置到环的起点位置和最开始的位置到环的起点位置的距离是一样的</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">detectCycle</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        fast = head</span><br><span class="line">        slow = head</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">None</span> <span class="keyword">and</span> fast.<span class="built_in">next</span> != <span class="literal">None</span>):</span><br><span class="line">            fast = fast.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            slow = slow.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">if</span> fast == slow:</span><br><span class="line">                meet_loc = fast</span><br><span class="line">                start = head</span><br><span class="line">                <span class="keyword">while</span> meet_loc != start:</span><br><span class="line">                    meet_loc = meet_loc.<span class="built_in">next</span></span><br><span class="line">                    start = start.<span class="built_in">next</span></span><br><span class="line">                <span class="keyword">return</span> start</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表专题1</title>
      <link href="/2022/12/13/%E9%93%BE%E8%A1%A8%E4%B8%93%E9%A2%981/"/>
      <url>/2022/12/13/%E9%93%BE%E8%A1%A8%E4%B8%93%E9%A2%981/</url>
      
        <content type="html"><![CDATA[<h2 id="链表理论基础"><a href="#链表理论基础" class="headerlink" title="链表理论基础"></a>链表理论基础</h2><p>链表有两个部分组成：</p><ul><li>数据域</li><li>指针域</li></ul><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><ul><li>入口是head</li><li>结尾的指针域指向空指针</li></ul><h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><ul><li>每个节点有两个指针域,一个指向上一个节点一个指向下一个节点</li></ul><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><ul><li>链表首尾相连</li></ul><h3 id="链表和数组的存储方式-x2F-时间复杂度"><a href="#链表和数组的存储方式-x2F-时间复杂度" class="headerlink" title="链表和数组的存储方式&#x2F;时间复杂度"></a>链表和数组的存储方式&#x2F;时间复杂度</h3><h4 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h4><ul><li>连续存储在内存中</li><li>插入删除：O(n)</li><li>查询：O(1)</li></ul><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><ul><li>链表：在内存中可不连续存储<br>插入删除：O(1)</li><li>查询：O(n)</li></ul><h3 id="链表定义"><a href="#链表定义" class="headerlink" title="链表定义"></a>链表定义</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="built_in">next</span></span><br></pre></td></tr></table></figure><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p>删除节点就是把这个节点的指针指向要删掉的节点的下一节点的数据域</p><h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><ul><li>把要添加位置的前一节点的指针指向要添加节点的数据域</li><li>把添加节点的指针指向添加位置后的节点的数据域</li></ul><h2 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203. 移除链表元素"></a>203. 移除链表元素</h2><p>题目链接：<a href="https://leetcode.cn/problems/remove-linked-list-elements/">https://leetcode.cn/problems/remove-linked-list-elements/</a></p><p>cur的作用是作为新的临时节点指针进行删除原链表元素操作</p><h3 id="原链表删除"><a href="#原链表删除" class="headerlink" title="原链表删除"></a>原链表删除</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElements</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode], val: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        <span class="comment"># print(head != None)</span></span><br><span class="line">        <span class="comment">#如果头节点等于要删除的val的话就向后移</span></span><br><span class="line">        <span class="keyword">while</span>(head != <span class="literal">None</span> <span class="keyword">and</span> head.val == val ):</span><br><span class="line">            head = head.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        cur = head</span><br><span class="line">        <span class="comment">#对于不是头节点的进行删除</span></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">None</span> <span class="keyword">and</span>  cur.<span class="built_in">next</span> != <span class="literal">None</span>):</span><br><span class="line">            <span class="keyword">if</span> cur.<span class="built_in">next</span>.val == val:</span><br><span class="line">                cur.<span class="built_in">next</span> = cur.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><h3 id="虚拟结点"><a href="#虚拟结点" class="headerlink" title="虚拟结点"></a>虚拟结点</h3><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ul><li>为了不单独区分头节点和不是头节点的删除操作</li><li>创造一个<code>dummy = ListNode()----dummy.next = head</code>的节点，然后再去创造一个新的current指针去遍历整个dummy链表</li><li>操作的点一定是<code>current.next</code> 这样子才可以进行增加或者删除操作</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElements</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode], val: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        dummy = ListNode()</span><br><span class="line">        dummy.<span class="built_in">next</span> = head</span><br><span class="line">        cur = dummy</span><br><span class="line">        <span class="keyword">while</span> cur.<span class="built_in">next</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> cur.<span class="built_in">next</span>.val != val:</span><br><span class="line">                cur = cur.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur.<span class="built_in">next</span> = cur.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;head&#x27;</span>,head)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;cur&#x27;</span>,cur)</span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><h2 id="707-设计链表"><a href="#707-设计链表" class="headerlink" title="707. 设计链表"></a>707. 设计链表</h2><p>题目链接：<a href="https://leetcode.cn/problems/design-linked-list/">https://leetcode.cn/problems/design-linked-list/</a></p><h3 id="单链表解法"><a href="#单链表解法" class="headerlink" title="单链表解法"></a>单链表解法</h3><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>我这道题主要看到问题知道怎么写但是对类的创建不是很了解，所以参考了视频以后才写出来</p><ul><li>首先创建单独的node类</li><li>对于提供的mylinkedlist 需要在构造函数里面初始化需要用的dummyhead和整个链表的长度</li><li>其他的基本没什么难度但是需要注意while内部需要自己定义index – 和进行添加以后的长度++</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,val = <span class="number">0</span>,<span class="built_in">next</span>=<span class="literal">None</span></span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.dummyhead = Node()</span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, index: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= self.size:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        cur = self.dummyhead</span><br><span class="line">        <span class="keyword">while</span>(index != <span class="number">0</span>):</span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> cur.<span class="built_in">next</span>.val</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addAtHead</span>(<span class="params">self, val: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        add_head = Node(val)</span><br><span class="line">        add_head.<span class="built_in">next</span> = self.dummyhead.<span class="built_in">next</span></span><br><span class="line">        self.dummyhead.<span class="built_in">next</span> = add_head</span><br><span class="line">        self.size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addAtTail</span>(<span class="params">self, val: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        add_tail = Node(val)</span><br><span class="line">        cur = self.dummyhead</span><br><span class="line">        <span class="keyword">while</span>(cur.<span class="built_in">next</span> != <span class="literal">None</span>):</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        cur.<span class="built_in">next</span> = add_tail</span><br><span class="line">        add_tail.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        self.size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addAtIndex</span>(<span class="params">self, index: <span class="built_in">int</span>, val: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> index == self.size:</span><br><span class="line">            self.addAtTail(val)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> index &lt; <span class="number">0</span>:</span><br><span class="line">            self.addAtHead()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> index &gt; self.size:</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        add_index_node = Node(val)</span><br><span class="line">        cur = self.dummyhead</span><br><span class="line">        <span class="keyword">while</span>(index != <span class="number">0</span>):</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">        add_index_node.<span class="built_in">next</span> = cur.<span class="built_in">next</span></span><br><span class="line">        cur.<span class="built_in">next</span> = add_index_node</span><br><span class="line">        self.size += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteAtIndex</span>(<span class="params">self, index: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> index &gt;= <span class="number">0</span> <span class="keyword">and</span> index &lt; self.size:</span><br><span class="line">            cur = self.dummyhead</span><br><span class="line">            <span class="keyword">while</span>(index != <span class="number">0</span>):</span><br><span class="line">                cur = cur.<span class="built_in">next</span></span><br><span class="line">                index -= <span class="number">1</span></span><br><span class="line">            cur.<span class="built_in">next</span> = cur.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            self.size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your MyLinkedList object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MyLinkedList()</span></span><br><span class="line"><span class="comment"># param_1 = obj.get(index)</span></span><br><span class="line"><span class="comment"># obj.addAtHead(val)</span></span><br><span class="line"><span class="comment"># obj.addAtTail(val)</span></span><br><span class="line"><span class="comment"># obj.addAtIndex(index,val)</span></span><br><span class="line"><span class="comment"># obj.deleteAtIndex(index)</span></span><br></pre></td></tr></table></figure><h2 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a>206. 反转链表</h2><p><a href="https://leetcode.cn/problems/reverse-linked-list/">https://leetcode.cn/problems/reverse-linked-list/</a></p><h3 id="双指针（迭代）"><a href="#双指针（迭代）" class="headerlink" title="双指针（迭代）"></a>双指针（迭代）</h3><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><ul><li>自己没想出来：用双指针</li><li>用temp存储cur.next保证cur下一步成功赋值</li><li>先赋值cur再赋值pre</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseList</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        <span class="keyword">if</span> head == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        cur = head</span><br><span class="line">        <span class="keyword">while</span> cur!= <span class="literal">None</span>:</span><br><span class="line">            temp = cur.<span class="built_in">next</span></span><br><span class="line">            cur.<span class="built_in">next</span> = pre</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = temp</span><br><span class="line">        <span class="keyword">return</span> pre</span><br></pre></td></tr></table></figure><h3 id="递归写法"><a href="#递归写法" class="headerlink" title="递归写法"></a>递归写法</h3><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><ul><li>利用双指针的思路实际上只是替换了pre和current指针移动的步骤</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseList</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">pre,cur</span>):</span><br><span class="line">            <span class="keyword">if</span> cur == <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> pre</span><br><span class="line">            temp = cur.<span class="built_in">next</span></span><br><span class="line">            cur.<span class="built_in">next</span> = pre</span><br><span class="line">            <span class="keyword">return</span> reverse(cur,temp)</span><br><span class="line">        <span class="keyword">return</span> reverse(<span class="literal">None</span>,head)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组专题2</title>
      <link href="/2022/12/12/%E6%95%B0%E7%BB%84%E4%B8%93%E9%A2%982/"/>
      <url>/2022/12/12/%E6%95%B0%E7%BB%84%E4%B8%93%E9%A2%982/</url>
      
        <content type="html"><![CDATA[<h2 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977.有序数组的平方"></a>977.有序数组的平方</h2><p>题目链接：<a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">https://leetcode.cn/problems/squares-of-a-sorted-array/</a></p><h3 id="1-暴力"><a href="#1-暴力" class="headerlink" title="1.暴力"></a>1.暴力</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>最直接的思路就是全部都平方然后调用<code>sorted()</code>函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortedSquares</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            nums[i] = nums[i]*nums[i]</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sorted</span>(nums)</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            nums[i] *= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-双指针"><a href="#2-双指针" class="headerlink" title="2.双指针"></a>2.双指针</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><ul><li>因为最大值在数组的两端，所以两个指针，一个指向起始位置一个指向末尾位置。</li><li>然后定义一个新的数组让他从末尾的位置（因为要一个非递减数列）开始赋值</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">result</span><span class="params">(nums.size(),<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> k = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>,j = nums.<span class="built_in">size</span>() - <span class="number">1</span>; i &lt;= j;)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i]* nums[i] &gt;= nums[j]*nums[j])&#123;</span><br><span class="line">                result[k--] = nums[i] * nums[i];</span><br><span class="line">                i ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                result[k--] = nums[j] * nums[j];</span><br><span class="line">                j --;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortedSquares</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        result = [<span class="number">0</span>] * (<span class="built_in">len</span>(nums))</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="comment"># k指针是新的数组倒叙进行赋值</span></span><br><span class="line">        k = <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= j:</span><br><span class="line">            <span class="comment"># 左边值大于等于右边值的平方的时候都是赋值给新的数组左边的值</span></span><br><span class="line">            <span class="keyword">if</span> nums[i] * nums[i] &gt;= nums[j] * nums[j]:</span><br><span class="line">                result[k] = nums[i] * nums[i]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result[k] = nums[j] * nums[j]</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            k -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209.长度最小的子数组"></a>209.长度最小的子数组</h2><p>题目链接：<a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">https://leetcode.cn/problems/minimum-size-subarray-sum/</a></p><h3 id="1-暴力-1"><a href="#1-暴力-1" class="headerlink" title="1.暴力"></a>1.暴力</h3><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><ul><li>两个for循环（外层的循环可以看作这个subset的开头，内层的是不断的累加来寻找最佳的连续的子数组, <strong>i：可以视作开头，j：可以视作结尾</strong>）</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#超时了</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minSubArrayLen</span>(<span class="params">self, target: <span class="built_in">int</span>, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        min_length = <span class="number">10</span>**<span class="number">10</span></span><br><span class="line">        length = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            sum_sub = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i,<span class="built_in">len</span>(nums)):</span><br><span class="line">               sum_sub += nums[j]</span><br><span class="line">               <span class="keyword">if</span> sum_sub &gt;= target:</span><br><span class="line">                   length = j - i + <span class="number">1</span></span><br><span class="line">                   <span class="built_in">print</span>(<span class="string">&#x27;sum_sub&#x27;</span>,sum_sub)</span><br><span class="line">                   <span class="built_in">print</span>(<span class="string">&#x27;\tlength&#x27;</span>,length)</span><br><span class="line">                   <span class="built_in">print</span>(<span class="string">&#x27;\t\tmin_lenght&#x27;</span>,min_length)</span><br><span class="line">                   <span class="keyword">if</span> min_length &gt; length:</span><br><span class="line">                       min_length = length</span><br><span class="line">                   <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> min_length == <span class="number">10</span>**<span class="number">10</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> min_length</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++同样超时了</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> min_len = INT32_MAX;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>();i ++)&#123;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; nums.<span class="built_in">size</span>();j ++)&#123;</span><br><span class="line">                sum += nums[j];</span><br><span class="line">                <span class="keyword">if</span> (sum&gt;= target)&#123;</span><br><span class="line">                    length = j - i + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (min_len &gt; length)&#123;</span><br><span class="line">                        min_len = length;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (min_len == INT32_MAX)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min_len;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-滑动窗口"><a href="#2-滑动窗口" class="headerlink" title="2.滑动窗口"></a>2.滑动窗口</h3><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><ul><li>通过移动末尾坐标不断让数组累积啊</li><li>当值大于等于target的时候移动i头坐标</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minSubArrayLen</span>(<span class="params">self, target: <span class="built_in">int</span>, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        min_length = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="comment">#无限大的数</span></span><br><span class="line">        length = <span class="number">0</span></span><br><span class="line">        sum_sub = <span class="number">0</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            sum_sub += nums[j]</span><br><span class="line">            <span class="keyword">while</span> sum_sub &gt;= target:</span><br><span class="line">                <span class="comment">#精髓（不要一直用 length+= 1或者 length -= 1）</span></span><br><span class="line">                <span class="comment">#用 j-i+1</span></span><br><span class="line">                length = j - i + <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> min_length &gt; length:</span><br><span class="line">                    min_length = length</span><br><span class="line">                <span class="comment">#滑动窗口的精髓</span></span><br><span class="line">                sum_sub -= nums[i]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> min_length == <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="keyword">else</span> min_length</span><br></pre></td></tr></table></figure><h2 id="59-螺旋矩阵II"><a href="#59-螺旋矩阵II" class="headerlink" title="59.螺旋矩阵II"></a>59.螺旋矩阵II</h2><p>题目链接：<br><a href="https://leetcode.cn/problems/spiral-matrix-ii/">https://leetcode.cn/problems/spiral-matrix-ii/</a></p><h3 id="模拟题"><a href="#模拟题" class="headerlink" title="模拟题"></a>模拟题</h3><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p>我最开始一点思路没有应该是卡在了count的这里,我在想不知道怎么创建数组因为只给了一个n，现在知道了就是固定住不变量（开区间）然后四个for循环去模拟。</p><ul><li>按照开区间从左到右</li><li>从上到下</li><li>从左到右</li><li>再次从上到下</li><li>最后如果n是奇数最后赋值</li><li>while loop循环的次数是n除以2</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generateMatrix</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        loop = <span class="number">0</span></span><br><span class="line">        row = <span class="number">0</span></span><br><span class="line">        col = <span class="number">0</span></span><br><span class="line">        count = <span class="number">1</span></span><br><span class="line">        offset = <span class="number">1</span></span><br><span class="line">        arr = [[<span class="number">0</span>] * n <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        <span class="keyword">while</span> loop &lt; n // <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(col,n - offset):</span><br><span class="line">                arr[row][i] = count</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(row,n- offset):</span><br><span class="line">                arr[j][n-offset] = count</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 重点这里是-1的操作，倒着遍历</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-offset,col,-<span class="number">1</span>):</span><br><span class="line">                arr[n-offset][i] = count</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(n-offset,row,-<span class="number">1</span>):</span><br><span class="line">                arr[l][col] = count</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            loop += <span class="number">1</span></span><br><span class="line">            row += <span class="number">1</span></span><br><span class="line">            col += <span class="number">1</span></span><br><span class="line">            offset += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            arr[n//<span class="number">2</span>][n//<span class="number">2</span>] = n*n</span><br><span class="line">        <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组专题1</title>
      <link href="/2022/12/11/%E6%95%B0%E7%BB%84%E4%B8%93%E9%A2%981/"/>
      <url>/2022/12/11/%E6%95%B0%E7%BB%84%E4%B8%93%E9%A2%981/</url>
      
        <content type="html"><![CDATA[<h2 id="数组理论基础"><a href="#数组理论基础" class="headerlink" title="数组理论基础"></a>数组理论基础</h2><p>数组可以方便的通过下标索引的方式获取到下标下对应的数据。</p><ul><li><strong>数组是存放在连续内存空间上的相同类型数据的集合</strong></li><li><strong>数组下标从零开始</strong></li><li><strong>数组内存空间地址是连续的</strong></li><li><strong>添加或者删除元素需要移动其他元素地址</strong></li><li><strong>数组的元素是不能删的，只能覆盖</strong><img src="https://github.com/YuuuWeng/YuuuWeng.github.io/raw/main/images/算法通关数组.png" alt="drawing" width="400" height/><img src="https://github.com/YuuuWeng/YuuuWeng.github.io/raw/main/images/算法通关数组1.png" alt="drawing" width="400" height/></li></ul><h2 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a>704. 二分查找</h2><p>题目链接: <a href="https://leetcode.cn/problems/binary-search/description/">https://leetcode.cn/problems/binary-search/description/</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>二分法必须是有序数组</li><li>无重复元素</li></ul><h3 id="两种不同的二分模版"><a href="#两种不同的二分模版" class="headerlink" title="两种不同的二分模版"></a>两种不同的二分模版</h3><h4 id="左闭右闭"><a href="#左闭右闭" class="headerlink" title="左闭右闭"></a>左闭右闭</h4><ul><li>[left,right]</li><li>left &#x3D; 0, right &#x3D; len(array) - 1</li><li>while(left &lt;&#x3D; right)</li><li>更新右边界的时候需要 right &#x3D; mid - 1 因为是闭区间，所以 nums[mid] 一定是不需要被包含到下一次while循环中的</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)&#123;</span><br><span class="line">            <span class="type">int</span> middle = left + ((right - left) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; target)&#123;</span><br><span class="line">                right = middle - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle] &lt; target)&#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right):</span><br><span class="line">            middle = left + (right - left) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[middle] &lt; target:</span><br><span class="line">                left = middle + <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[middle] &gt; target:</span><br><span class="line">                right = middle - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> middle</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="左闭右开"><a href="#左闭右开" class="headerlink" title="左闭右开"></a>左闭右开</h4><ul><li>[left,right)</li><li>left &#x3D; 0, right &#x3D; len(array)</li><li>while(left &lt; right)</li><li>因为是开区间，所以更新right的时候 right &#x3D; mid,这个时候还是不会去比较nums[mid]</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right)&#123;</span><br><span class="line">            <span class="type">int</span> middle = left + ((right - left) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; target)&#123;</span><br><span class="line">                right = middle;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle] &lt; target)&#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right):</span><br><span class="line">            middle = left + (right - left) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[middle] &lt; target:</span><br><span class="line">                left = middle + <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[middle] &gt; target:</span><br><span class="line">                right = middle</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> middle</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a>27. 移除元素</h2><p><a href="https://leetcode.cn/problems/remove-element/">https://leetcode.cn/problems/remove-element/</a></p><h3 id="1-暴力"><a href="#1-暴力" class="headerlink" title="1.暴力"></a>1.暴力</h3><ul><li>暴力就是两个for loop,遇到要删除对val就用后面一个值进行替换。（重点是要记得替换以后下标发生了改变）</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i =<span class="number">0</span>; i &lt; size;i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == val)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; size; j++)&#123;</span><br><span class="line">                    nums[j - <span class="number">1</span>] = nums[j];</span><br><span class="line">                &#125;</span><br><span class="line">                i --;</span><br><span class="line">                size --;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>对于python的代码暴力做法下标 i-&#x3D; 1不适用,  python i-&#x3D; 1对于for loop 循环没有影响<strong>所以python无法用</strong></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">removeElement</span>(<span class="params">nums, val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        size = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] == val:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;i&#x27;</span>,i)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;nums[i]&#x27;</span>,nums[i])</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">                    nums[j-<span class="number">1</span>] = nums[j]</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;\ti——post&#x27;</span>,i)</span><br><span class="line">                size -= <span class="number">1</span>  </span><br><span class="line">                <span class="comment"># print(&quot;nums&quot;,nums)  </span></span><br><span class="line">        <span class="keyword">return</span> size</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    target = <span class="number">2</span></span><br><span class="line">    size = removeElement(nums,val = target)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;size&quot;</span>,size)</span><br><span class="line">    <span class="built_in">print</span>(nums)</span><br><span class="line">[Running] python -u <span class="string">&quot;/Users/yuweng/Desktop/test.py&quot;</span></span><br><span class="line">i <span class="number">1</span></span><br><span class="line">nums[i] <span class="number">2</span></span><br><span class="line">i——post <span class="number">0</span></span><br><span class="line">size <span class="number">3</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-双指针（快慢指针）"><a href="#2-双指针（快慢指针）" class="headerlink" title="2.双指针（快慢指针）"></a>2.双指针（快慢指针）</h3><ul><li>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</li><li>本质上利用两个指针，一个指针进行遍历操作(寻找新数组元素)，一个指针进行更新记录操作（赋值新数组元素）</li><li>遇到等于删除的元素直接跳过</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> slow = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> fast = <span class="number">0</span>; fast &lt; size; fast ++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[fast] != val)&#123;</span><br><span class="line">                nums[slow] = nums[fast];</span><br><span class="line">                slow ++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        slow = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] != val:</span><br><span class="line">                nums[slow] = nums[i]</span><br><span class="line">                slow += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> slow</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/12/08/hello-world/"/>
      <url>/2022/12/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
